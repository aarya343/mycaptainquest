import random
from collections import defaultdict

class TextGenerator:
    def __init__(self, n=2):
        """
        Initialize with n-gram size (default: bigrams)
        """
        self.n = n
        self.chain = defaultdict(list)
        self.start_tokens = []
        
    def train(self, text):
        """
        Train the model on input text
        """
        words = text.split()
        
        # Add start tokens
        self.start_tokens.append(tuple(words[:self.n]))
        
        # Build Markov chain
        for i in range(len(words) - self.n):
            current_state = tuple(words[i:i+self.n])
            next_word = words[i+self.n]
            self.chain[current_state].append(next_word)
    
    def generate(self, length=50):
        """
        Generate new text of specified length
        """
        if not self.chain:
            return "Model not trained yet"
            
        # Start with a random beginning
        current_state = random.choice(self.start_tokens)
        result = list(current_state)
        
        for _ in range(length):
            possible_words = self.chain.get(current_state, [])
            
            if not possible_words:
                break
                
            next_word = random.choice(possible_words)
            result.append(next_word)
            current_state = tuple(result[-self.n:])
            
        return ' '.join(result)

def main():
    # Initialize generator
    generator = TextGenerator(n=2)
    
    # Load training data
    try:
        with open('training_data.txt', 'r', encoding='utf-8') as file:
            training_text = file.read()
    except FileNotFoundError:
        print("Error: training_data.txt not found")
        return
    
    # Train the model
    generator.train(training_text)
    
    # Generate new text
    generated_text = generator.generate(200)
    
    # Save output
    with open('generated_text.txt', 'w', encoding='utf-8') as file:
        file.write(generated_text)
    
    print("Text generation complete! Check generated_text.txt")

if __name__ == "__main__":
    main()
